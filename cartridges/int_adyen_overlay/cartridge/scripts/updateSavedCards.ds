/**
* Deletes expired payment instruments, syncs cards with Adyen recurring payments card list
*
* @input CurrentCustomer : dw.customer.Customer
*/

/* API Includes */
var HashMap = require('dw/util/HashMap');
var Logger = require('dw/system/Logger');
var PaymentInstrument = require('dw/order/PaymentInstrument');
var Transaction = require('dw/system/Transaction');
var constants = require("*/cartridge/adyenConstants/constants");

/* Script Modules */
var AdyenHelper = require('*/cartridge/scripts/util/AdyenHelper');

function updateSavedCards(args) {
    try {
        var customer = args.CurrentCustomer;
        if(!(customer && customer.getProfile() && customer.getProfile().getWallet())){
            Logger.getLogger("Adyen").error("Error while updating saved cards, could not get customer data")
            return { error : true };
        }

        if (AdyenHelper.getAdyenRecurringPaymentsEnabled()) {
            var oneClickPaymentMethods = getOneClickPaymentMethods(customer);
            //To make it compatible with upgrade from older version, first delete payment instruments with METHOD_CREDIT_CARD
            var savedCreditCards = customer.getProfile().getWallet().getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD);
            var savedCreditCardsComponent = customer.getProfile().getWallet().getPaymentInstruments(constants.METHOD_ADYEN_COMPONENT);

            Transaction.wrap(function () {
                // remove all current METHOD_CREDIT_CARD PaymentInstruments
                for (var i = 0; i < savedCreditCards.length; i++) {
                    var creditCard = savedCreditCards[i];
                    customer.getProfile().getWallet().removePaymentInstrument(creditCard);
                }
                // remove all current METHOD_ADYEN_COMPONENT PaymentInstruments
                for (var i = 0; i < savedCreditCardsComponent.length; i++) {
                    var creditCard = savedCreditCardsComponent[i];
                    customer.getProfile().getWallet().removePaymentInstrument(creditCard);
                }

                // Create from existing cards a paymentInstrument
                for (var pm in oneClickPaymentMethods) {
                    var payment = oneClickPaymentMethods[pm];
                    var expiryMonth = payment.storedDetails.card.expiryMonth ? payment.storedDetails.card.expiryMonth : "";
                    var expiryYear = payment.storedDetails.card.expiryYear ? payment.storedDetails.card.expiryYear : "";
                    var holderName = payment.storedDetails.card.holderName ? payment.storedDetails.card.holderName : "";
                    var lastFour = payment.storedDetails.card.number ? payment.storedDetails.card.number : "";
                    var number = lastFour ? new Array(12 + 1).join('*') + lastFour : "";
                    var token = payment.recurringDetailReference;
                    var cardType = payment.type ? AdyenHelper.getSFCCCardType(payment.type) : "";

                    // if we have everything we need, create a new payment instrument
                    if (expiryMonth && expiryYear && number && token && cardType && holderName) {
                        var newCreditCard = customer.getProfile().getWallet().createPaymentInstrument(constants.METHOD_ADYEN_COMPONENT);
                        newCreditCard.setCreditCardExpirationMonth(Number(expiryMonth));
                        newCreditCard.setCreditCardExpirationYear(Number(expiryYear));
                        newCreditCard.setCreditCardType(cardType);
                        newCreditCard.setCreditCardHolder(holderName);
                        newCreditCard.setCreditCardNumber(number);
                        newCreditCard.setCreditCardToken(token);
                    }
                }

            });

            return { error : false };
        }
    }
     catch (ex) {
        Logger.getLogger("Adyen").error(ex.toString() + ' in ' + ex.fileName + ':' + ex.lineNumber);
        return { error : true };
    }
}

function getOneClickPaymentMethods(customer) {
    var getPaymentMethods = require('*/cartridge/scripts/adyenGetPaymentMethods');
    var oneClickPaymentMethods = getPaymentMethods.getMethods(null, customer, "").oneClickPaymentMethods;
    return oneClickPaymentMethods ? oneClickPaymentMethods : null;
}

module.exports = {
    'updateSavedCards': updateSavedCards
}