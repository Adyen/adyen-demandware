/**
* Passes on credit card details to Adyen using the Adyen PAL adapter
* Receives a response and sets the order status accordingly
* created on 23dec2014
*
* @input Order : dw.order.Order
* @input Amount : dw.value.Money The amount to authorize
* @input PaymentInstrument : dw.order.PaymentInstrument
* @input CurrentSession : dw.system.Session
* @input CurrentRequest : dw.system.Request
* @input CreditCardForm : dw.web.Form
* @input SaveCreditCard : Boolean
*
* @output Decision : String
* @output PaymentStatus : String
* @output AuthorizationCode :  String
* @output AuthorizationAmount : String
* @output PaRequest : String
* @output PspReference : String
* @output MD : String
* @output ResultCode : String
* @output IssuerUrl : String
* @output AVSResultCode : String
* @output AdyenErrorMessage : String
* @output AdyenAmount : String
* @output AdyenCardType : String
*
*/

/* API Includes */
var Logger = require('dw/system/Logger');

/* Script Modules */
var AdyenHelper = require('*/cartridge/scripts/util/AdyenHelper');
var RiskDataHelper = require ("*/cartridge/scripts/util/RiskDataHelper");
var AdyenGetOpenInvoiceData = require('*/cartridge/scripts/adyenGetOpenInvoiceData');

function createPaymentRequest(args) {
    try {
        var order = args.Order;
        var paymentInstrument = args.PaymentInstrument;

        //Create request object with payment details
        var paymentRequest = AdyenHelper.createAdyenRequestObject(order, paymentInstrument);

        //Add Risk data
        if (AdyenHelper.getAdyenBasketFieldsEnabled()) {
            paymentRequest.additionalData = RiskDataHelper.createBasketContentFields(order);
        }

        // Get 3DS2 data
        if (AdyenHelper.getAdyen3DS2Enabled()) {
            paymentRequest = AdyenHelper.add3DS2Data(paymentRequest);
        }

        //Different returnUrl for APM's and credit cards
        paymentRequest.returnUrl = args.ReturnUrl;

        var myAmount = AdyenHelper.getCurrencyValueForApi(paymentInstrument.paymentTransaction.amount); //args.Amount * 100;
        paymentRequest.amount = {
            'currency': paymentInstrument.paymentTransaction.amount.currencyCode,
            'value': myAmount
        };

        var paymentMethodType = paymentRequest.paymentMethod.type;
        //Create billing and delivery address objects for new orders, no address fields for credit cards through My Account
        paymentRequest = AdyenHelper.createAddressObjects(order, paymentMethodType, paymentRequest);


        var adyenForm = null;
        if(args.adyenForm){
            adyenForm = args.adyenForm;
        }
        //Create shopper data fields
        paymentRequest = AdyenHelper.createShopperObject({
            order: order,
            adyenForm: adyenForm,
            paymentRequest: paymentRequest
        });

        if (args.adyenFingerprint) {
            paymentRequest.deviceFingerprint = args.adyenFingerprint
        }

        //Set open invoice data
        if (AdyenHelper.isOpenInvoiceMethod(paymentRequest.paymentMethod.type)) {
            paymentRequest.lineItems = AdyenGetOpenInvoiceData.getLineItems(args);
            if (paymentRequest.paymentMethod.type.indexOf("ratepay") != -1 && args.ratePayFingerprint) {
                paymentRequest.deviceFingerprint = args.ratePayFingerprint;
            }
        }

        // make API call
        return doPaymentCall(order, paymentInstrument, paymentRequest);
    }
    catch (e) {
        Logger.getLogger("Adyen").error('error processing payment. Error message: ' + e.message + " more details: "+ e.toString() + " in " + e.fileName + ":" + e.lineNumber);
        return {error: true};
    }
}

function doPaymentCall(order, paymentInstrument, paymentRequest){
    var paymentResponse = {};
    var errorMessage = "";
    try {
       var callResult = executeCall(AdyenHelper.SERVICE.PAYMENT, paymentRequest);
        if (callResult.isOk() == false){
            Logger.getLogger("Adyen").error("Adyen: Call error code" +  callResult.getError().toString() + " Error => ResponseStatus: " + callResult.getStatus()  + " | ResponseErrorText: " +  callResult.getErrorMessage() + " | ResponseText: " + callResult.getMsg());
            paymentResponse.AdyenErrorMessage = dw.web.Resource.msg("confirm.error.declined","checkout", null);
            return {
                error: true,
                args: paymentResponse
            };
        }

        var resultObject = callResult.object;
        if (!resultObject || !resultObject.getText()) {
            throw new Error("No correct response from " + serviceType + ", result: " + JSON.stringify(resultObject))
        }

        // build the response object
        var responseObject;
        try {
            responseObject = JSON.parse(resultObject.getText());
        } catch (ex) {
            Logger.getLogger("Adyen").error("error parsing response object " + ex.message);
            return { error: true };
        }

        // if the card is enrolled for 3D Secure, the response contains a redirect object
        paymentResponse.RedirectObject = responseObject.redirect ? responseObject.redirect : "";
        paymentResponse.resultCode = responseObject.resultCode; // resultCode
        paymentResponse.pspReference = responseObject.pspReference ? responseObject.pspReference : "";
        paymentResponse.AdyenAmount = paymentRequest.amount.value;
        paymentResponse.Decision = "ERROR";

        //Check the response object from /payment call
        if (paymentResponse.resultCode == "IdentifyShopper" || paymentResponse.resultCode == "ChallengeShopper") {
            paymentResponse.Decision = "ACCEPT";
            paymentResponse.ThreeDS2 = true;
            var token3ds2;
            if(responseObject.authentication["threeds2.fingerprintToken"]) {
                token3ds2 = responseObject.authentication["threeds2.fingerprintToken"]
            }
            else if (responseObject.authentication["threeds2.challengeToken"]){
                token3ds2 = responseObject.authentication["threeds2.challengeToken"];
            }
            paymentResponse.token3ds2 = token3ds2;
            paymentResponse.PaymentData = responseObject.paymentData;
        }

        else if (paymentResponse.resultCode == "Authorised" || paymentResponse.resultCode == "RedirectShopper") {
            paymentResponse.Decision = "ACCEPT";
            paymentResponse.PaymentData = responseObject.paymentData;
            // if 3D Secure is used, the statuses will be updated later
            if (order && paymentResponse.resultCode == "Authorised") {
                order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_PAID);
                order.setExportStatus(dw.order.Order.EXPORT_STATUS_READY);
                Logger.getLogger("Adyen").info("Payment result: Authorised");
            }

            if (args.RedirectObject == "") { // if is not 3DSecure
                Logger.getLogger("Adyen").debug("Adyen: " + resultObject.getStatusCode() + " Error => " + resultObject.getStatusMessage() + " | " + resultObject.getText());
            }
        }
        else if(paymentResponse.resultCode == "PresentToShopper") {
            if (responseObject.action) {
                paymentInstrument.custom.adyenAction = JSON.stringify(responseObject.action);
            }

            if(responseObject.outputDetails){
                var outputDetailsData = [];
                for (var data in responseObject.outputDetails) {
                    outputDetailsData.push({
                        key: data,
                        value: responseObject.outputDetails[data]
                    })
                }
                paymentInstrument.custom.adyenAdditionalPaymentData = JSON.stringify(outputDetailsData);
            }
        }

        else if(paymentResponse.resultCode == "Received") {
            paymentResponse.Decision = "ACCEPT";
            if(responseObject.additionalData["bankTransfer.owner"]){
                var bankTransferData = [{"key":"bankTransfer.description","value":"bankTransfer.description"}];
                for (var data in responseObject.additionalData){
                    if(data.indexOf("bankTransfer.") != -1) {
                        bankTransferData.push({
                            key: data,
                            value: responseObject.additionalData[data]
                        })
                    }
                }
                paymentInstrument.custom.adyenAdditionalPaymentData = JSON.stringify(bankTransferData);
            }

            if(responseObject.additionalData["comprafacil.entity"]){
                var multiBancoData = [{"key":"comprafacil.description","value":"comprafacil.description"}];
                for (var data in responseObject.additionalData){
                    if(data.indexOf("comprafacil.") != -1) {
                        multiBancoData.push({
                            key: data,
                            value: responseObject.additionalData[data]
                        })
                    }
                }
                paymentInstrument.custom.adyenAdditionalPaymentData = JSON.stringify(multiBancoData);
            }

            order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_NOTPAID);
            order.setExportStatus(dw.order.Order.EXPORT_STATUS_NOTEXPORTED);
        }
        else  {
            paymentResponse.Decision = "REFUSED";
            order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_NOTPAID);
            order.setExportStatus(dw.order.Order.EXPORT_STATUS_NOTEXPORTED);

            errorMessage = dw.web.Resource.msg("confirm.error.declined","checkout", null);
            if ("refusalReason" in responseObject && !empty(responseObject.refusalReason)) {
                errorMessage += " (" + responseObject.refusalReason + ")";
            }
            paymentResponse.AdyenErrorMessage = errorMessage;
            Logger.getLogger("Adyen").info("Payment result: Refused");
        }
        return paymentResponse;
    }
    catch (e) {
        Logger.getLogger("Adyen").fatal("Adyen: " + e.toString() + " in " + e.fileName + ":" + e.lineNumber);
        return { error: true };
    }
}

function doPaymentDetailsCall(paymentDetailsRequest){
    var callResult = executeCall(AdyenHelper.SERVICE.PAYMENTDETAILS, paymentDetailsRequest);
    if (callResult.isOk() == false){
        Logger.getLogger("Adyen").error("Adyen: Call error code" +  callResult.getError().toString() + " Error => ResponseStatus: " + callResult.getStatus()  + " | ResponseErrorText: " +  callResult.getErrorMessage() + " | ResponseText: " + callResult.getMsg());
        return {
            error: true
        };
    }

    var resultObject = callResult.object;
    if (!resultObject || !resultObject.getText()) {
        Logger.getLogger("Adyen").error("Error in /payment/details response, response: " + JSON.stringify(resultObject))
        return { error: true };
    }

    // build the response object
    var responseObject;
    try {
        responseObject = JSON.parse(resultObject.getText());
    } catch (ex) {
        Logger.getLogger("Adyen").error("error parsing response object " + ex.message);
        return { error: true };
    }

    return responseObject;
}

function executeCall(serviceType, requestObject){
    var service = AdyenHelper.getService(serviceType);
    if (service == null) {
        return {error: true};
    }
    var apiKey = AdyenHelper.getAdyenApiKey();
    service.addHeader("Content-type","application/json");
    service.addHeader("charset", "UTF-8");
    service.addHeader("X-API-KEY", apiKey);
    var callResult = service.call(JSON.stringify(requestObject));
    return callResult;

}

module.exports = {
    "createPaymentRequest": createPaymentRequest,
    "doPaymentCall" : doPaymentCall,
    "doPaymentDetailsCall": doPaymentDetailsCall
}