/**
* Passes on credit card details to Adyen using the Adyen PAL adapter
* Receives a response and sets the order status accordingly
* created on 23dec2014
*
* @input Order : dw.order.Order
* @input Amount : dw.value.Money The amount to authorize
* @input PaymentInstrument : dw.order.PaymentInstrument
* @input CurrentSession : dw.system.Session
* @input CurrentRequest : dw.system.Request
* @input CreditCardForm : dw.web.Form
* @input SaveCreditCard : Boolean
*
* @output Decision : String
* @output PaymentStatus : String
* @output AuthorizationCode :  String
* @output AuthorizationAmount : String
* @output PaRequest : String
* @output PspReference : String
* @output MD : String
* @output ResultCode : String
* @output IssuerUrl : String
* @output AVSResultCode : String
* @output AdyenErrorMessage : String
* @output AdyenAmount : String
* @output AdyenCardType : String
*
*/

/* API Includes */
var Logger = require('dw/system/Logger');
var Transaction = require('dw/system/Transaction');
var URLUtils = require('dw/web/URLUtils');

/* Script Modules */
var AdyenHelper = require('int_adyen_overlay/cartridge/scripts/util/AdyenHelper');

function execute(args) {
    var result = verify(args);
    if (result.error) {
        return PIPELET_ERROR;
    }
    return PIPELET_NEXT;  
}

function alternativePaymentMethod(args){
    Logger.getLogger('Adyen').error('alternativePaymentMethod entered');
    var paymentMethodObject = {
        "type" : args.PaymentType
    };
    if(args.IssuerId){
        paymentMethodObject['issuerId'] = args.IssuerId;
    }
    return createPaymentRequest(args, paymentMethodObject);
}

function creditCard(args) {
    Logger.getLogger('Adyen').error('creditCard entered');
    try {
        if (args.Order == null) {
            Logger.getLogger('Adyen').error('No order present.');
            return {error: true};
        }
        var paymentInstrument = args.PaymentInstrument;
        // var tokenID = '';
        // var errorMessage = '';

        // TODO: for new cards use the recurring type in the settings
        // For oneclick cards use ONECICK
        var recurringType = AdyenHelper.getAdyenRecurringType();
        var isOneClick = false;
        if (paymentInstrument.getCreditCardToken()) {
            recurringType = 'ONECLICK';
            isOneClick = true;
        }
        Logger.getLogger('Adyen').error('1');
        var cardType = (!empty(paymentInstrument.creditCardType) ? AdyenHelper.getAdyenCardType(paymentInstrument.creditCardType) : '');
        var paymentMethodObject = AdyenHelper.createCardObjectSF(isOneClick);
        //jsonObject['paymentMethod'] = paymentMethodObject;
        // Logger.getLogger('Adyen').error('paymentMethodObject = ' + JSON.stringify(paymentMethodObject));
        // if (AdyenHelper.getAdyenRecurringPaymentsEnabled()) {
        //     if (!empty(paymentInstrument.getCreditCardToken()) && !empty(customerID)) {
        //         paymentMethodObject['recurringDetailReference'] = paymentInstrument.getCreditCardToken();
        //     }
        //     else if (!empty(recurringType) && saveCreditCard) {
        //         paymentMethodObject['storeDetails'] = true;
        //     }
        // }

        // jsonObject.additionalData = {
        //     "executeThreeD": true
        // };
        Logger.getLogger('Adyen').error('beforeCreateRequest = ' + JSON.stringify(paymentMethodObject));
        return createPaymentRequest(args, paymentMethodObject);

    }
    catch(e){

    }
    return args;
}

function createPaymentRequest(args, paymentMethodObject) {
    var order = args.Order;
    var recurringType = "";
    var saveCreditCard = !empty(args.SaveCreditCard) ? args.SaveCreditCard : false;
    Logger.getLogger('Adyen').error('createPaymentRequest entered');
    var jsonObject = AdyenHelper.createAdyenRequestObject(recurringType, order, saveCreditCard);
    var customer = order.getCustomer();
    var profile = !empty(customer) && customer.registered && !empty(customer.getProfile()) ? customer.getProfile() : null;
    var customerID = '';
    if (!empty(profile) && !empty(profile.getCustomerNo())) {
        customerID = profile.getCustomerNo();
    }
    Logger.getLogger('Adyen').error('customer = ' + JSON.stringify(customer));

    jsonObject['returnUrl'] = URLUtils.https('Order-Confirm').toString();

    jsonObject['paymentMethod'] = paymentMethodObject;
    Logger.getLogger('Adyen').error('paymentMethodObject = ' + JSON.stringify(paymentMethodObject));
    var shopperObject = AdyenHelper.createShopperObject({
        Customer: customer,
        Basket: order
    });

    var myAmount = AdyenHelper.getCurrencyValueForApi(args.Amount); //args.Amount * 100;
    jsonObject['amount'] = {
        'currency': args.Amount.currencyCode,
        'value': myAmount
    };

    var shippingAddr: OrderAddress = args.Order.defaultShipment.shippingAddress;
    var houseNumberShip;
    if (shippingAddr.address2) {
        houseNumberShip = shippingAddr.address2;
    }
    else {
        houseNumberShip = "N/A";
    }
    Logger.getLogger('Adyen').error('shippingAddr = ' + JSON.stringify(shippingAddr));
    jsonObject.deliveryAddress = {
        "city": shippingAddr.city,
        "country": shippingAddr.countryCode.value,
        "houseNumberOrName": houseNumberShip,
        "postalCode": shippingAddr.postalCode,
        "stateOrProvince": shippingAddr.stateCode,
        "street": shippingAddr.address1
    };

    var billingAddr: OrderAddress = args.Order.getBillingAddress();
    var houseNumberBill;
    if (billingAddr.address2) {
        houseNumberBill = billingAddr.address2;
    }
    else {
        houseNumberBill = "N/A";
    }
    jsonObject.billingAddress = {
        "city": billingAddr.city,
        "country": billingAddr.countryCode.value,
        "houseNumberOrName": houseNumberBill,
        "postalCode": billingAddr.postalCode,
        "stateOrProvince": billingAddr.stateCode,
        "street": billingAddr.address1
    };
    Logger.getLogger('Adyen').error('billingAddr = ' + JSON.stringify(billingAddr));
    jsonObject.shopperName = {
        "firstName": billingAddr.firstName,
        "gender": "UNKNOWN",
        "infix": "",
        "lastName": billingAddr.lastName
    };

    var requestObject = AdyenHelper.extend(jsonObject, shopperObject);
    Logger.getLogger('Adyen').error('requestObject = ' + JSON.stringify(requestObject));

    // assign default values for the script output variables
    args.RedirectObject = '';
    args.ResultCode = '';
    args.AuthorizationCode = '';
    args.PspReference = '';
    args.PaymentStatus = '?';
    args.AuthorizationAmount = '';
    args.Decision = '';
    args.AdyenErrorMessage = '';

    // make API call
    return doCheckoutCall(args, requestObject);
}

function doCheckoutCall(args, requestObject){
    try {
        var callResult = null;
        var service = AdyenHelper.getService(AdyenHelper.SERVICE.PAYMENT);
        if (service == null) {
            return {error: true};
        }
        var resultObject = null;

        var apiKey = AdyenHelper.getAdyenApiKey();
        service.addHeader('Content-type','application/json');
        service.addHeader('charset', 'UTF-8');
        service.addHeader('X-API-KEY', apiKey);

        callResult = service.call(JSON.stringify(requestObject));
        Logger.getLogger('Adyen').error('callResult = ' + JSON.stringify(callResult));
        if (callResult.isOk() == false){
            Logger.error('Adyen: Call error code' +  callResult.getError().toString() + ' Error => ResponseStatus: ' + callResult.getStatus()  + ' | ResponseErrorText: ' +  callResult.getErrorMessage() + ' | ResponseText: ' + callResult.getMsg());
            args.AdyenErrorMessage = dw.web.Resource.msg('confirm.error.declined','checkout', null);
            return {
                error: true,
                args: args
            };
        }

        resultObject = callResult.object;
        Logger.getLogger('Adyen').error('resultObject = ' + JSON.stringify(resultObject));
        var resultObj = {
            statusCode: resultObject.getStatusCode(),
            statusMessage: resultObject.getStatusMessage(),
            text: resultObject.getText(),
            errorText: resultObject.getErrorText(),
            timeout: resultObject.getTimeout()
        }

        var resultText = ('text' in resultObj && !empty(resultObj.text) ? resultObj.text : null);
        if (resultText == null) {
            return {error: true};
        }

        // build the response object
        var responseObj;
        try {
            responseObj = JSON.parse(resultText);
        } catch (ex) {
            Logger.error('error parsing response object ' + ex.message);
            return {error: true};
        }
        Logger.getLogger('Adyen').error('responseObj = ' + JSON.stringify(responseObj));
        // return the AVS result code
        args.AVSResultCode = (!empty(responseObj.avsResultRaw) ? responseObj.avsResultRaw : '');

        // if the card is enrolled in the 3-D Secure programme the response should contain these 4 fields
        if ('redirect' in responseObj) {args.RedirectObject = responseObj.redirect;} // issuerUrl
        args.ResultCode = responseObj.resultCode; // resultCode

        args.PspReference = ('pspReference' in responseObj && !empty(responseObj.pspReference) ? responseObj.pspReference : '');
        args.PaymentStatus = resultObj.errorText;
        args.AuthorizationAmount = args.Amount.getValue().toFixed(2);
        args.Decision = 'ERROR';

        var resultCode = args.ResultCode;

        Logger.getLogger('Adyen').error('resultCode = ' + JSON.stringify(resultCode));
        if (resultCode.indexOf('Authorised') != -1 || (resultCode.indexOf('RedirectShopper') != -1) ) {
            args.Decision = 'ACCEPT';
            args.PaymentStatus = resultCode;
            args.PaymentData = responseObj.paymentData;
            // if 3D Secure is used, the statuses will be updated later
            if (!('redirect' in responseObj)) {
                var order = args.Order;
                order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_PAID);
                order.setExportStatus(dw.order.Order.EXPORT_STATUS_READY);
            }
            Logger.getLogger('Adyen').error('Payment result: Authorised');
            Logger.getLogger('Adyen').info('Payment result: Authorised');
            Logger.getLogger('Adyen').info('Decision: ' + args.Decision);

            if (args.RedirectObject == '') { // if is not 3DSecure
                Logger.getLogger('Adyen').debug('Adyen: ' + resultObj.statusCode + ' Error => ' + resultObj.statusMessage + ' | ' + resultObj.errorText);
            }
        }
        else  {
            args.PaymentStatus = 'Refused';
            args.Decision = 'REFUSED';

            order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_NOTPAID);
            order.setExportStatus(dw.order.Order.EXPORT_STATUS_NOTEXPORTED);

            errorMessage = dw.web.Resource.msg('confirm.error.declined','checkout', null);
            if ('refusalReason' in responseObj && !empty(responseObj.refusalReason)) {
                errorMessage += ' (' + responseObj.refusalReason + ')';
            }
            args.AdyenErrorMessage = errorMessage;

            Logger.getLogger('Adyen').info('Payment result: Refused');
        }

        return args;
    }
    catch (e) {
        Logger.getLogger('Adyen').fatal('Adyen: ' + e.toString() + ' in ' + e.fileName + ':' + e.lineNumber);
        return {error: true};
    }
}

module.exports = {
    'execute': execute,
    'creditCard': creditCard,
    'alternativePaymentMethod': alternativePaymentMethod
}