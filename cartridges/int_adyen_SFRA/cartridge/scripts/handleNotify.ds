/**
 * save Adyen Notification
 * see page 22 of Adyen Integration manual
 *
 * v1 110324 : logging to file
 * v2 110325 :
 * v3 110408 : pass on OrderNo, Paymentresult for update
 * v4 130422 : Merged adyen_notify and update_order into single script
 *
 * @input CurrentHttpParameterMap : Object
 *
 */
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.value);
importPackage( dw.order);
importPackage( dw.object );

var CustomObjectMgr = require('dw/object/CustomObjectMgr');

function notify (notificationData) {

	// Check the input parameters
	if (notificationData == null) {
		Logger.getLogger("Adyen", "adyen").fatal("Handling of Adyen notification has failed. No input parameters were provided.");
		return PIPELET_NEXT;
	}

	try {
	// Log detailed response to ScriptLog and log file
	var msg : String = createLogMessage(notificationData);
	Logger.getLogger("Adyen", "adyen").debug(msg);


	var calObj : Calendar = new Calendar();

	//create custom object
	var keyValue : String = notificationData.merchantReference + "-" + StringUtils.formatCalendar(calObj, "yyyyMMddhhmmss");
	var customObj : CustomObject = CustomObjectMgr.createCustomObject("adyenNotification", keyValue);
	customObj.custom.currency = notificationData.currency;
	customObj.custom.eventCode = notificationData.eventCode;

	var timeString : String = StringUtils.formatCalendar(calObj, "yyyy-MM-dd'T'hh:mm:ss.sssZ");

	customObj.custom.eventDate = timeString;
	//customObj.custom.httpRemoteAddress = request.httpRemoteAddress;
	customObj.custom.live = notificationData.live;
	customObj.custom.merchantAccountCode = notificationData.merchantAccountCode;
	customObj.custom.merchantReference = notificationData.merchantReference;
	customObj.custom.operations = notificationData.operations;
	customObj.custom.paymentMethod = notificationData.paymentMethod;
	//custom.processedDate
	//custom.processedStatus
	customObj.custom.pspReference = notificationData.pspReference;
	customObj.custom.reason = notificationData.reason;
	customObj.custom.success = notificationData.success;
	customObj.custom.value = notificationData.value;
	customObj.custom.version = "4d";
	switch(notificationData.eventCode) {
		case "AUTHORISATION" :
		    // Save all request to custom attribute for Authorization event
			customObj.custom.Adyen_log = JSON.stringify(notificationData);
		case "CANCELLATION" :
		case "CANCEL_OR_REFUND" :
		case "REFUND" :
		case "CAPTURE_FAILED" :
		case "ORDER_OPENED" :
		case "ORDER_CLOSED" :
		case "PENDING" :
			customObj.custom.updateStatus = "PROCESS";
			Logger.getLogger("Adyen").info ("Received notification for merchantReference {0} with status {1}. Custom Object set up to 'PROCESS' status.", notificationData.merchantReference, notificationData.eventCode);
			break;
		default:
			customObj.custom.updateStatus = "PENDING";
			Logger.getLogger("Adyen").info ("Received notification for merchantReference {0} with status {1}. Custom Object set up to 'PENDING' status.", notificationData.merchantReference, notificationData.eventCode);
	}

	} catch(e) {
		var ex = e;
		Logger.getLogger("Adyen", "adyen").error(e.message);
	}

	return PIPELET_NEXT;
}

function createLogMessage(notificationData){
	var VERSION : String= "4d";
	var msg = "";
	msg = "AdyenNotification v " + VERSION + " - Payment info (Called from : " + request.httpRemoteAddress + ")";
	msg = msg + "\n================================================================\n";
    //msg = msg + "\nSessionID : " + args.CurrentSession.sessionID;
    msg = msg + "reason : " + notificationData.reason;
	msg = msg + "\neventDate : " + notificationData.eventDate;
	msg = msg + "\nmerchantReference : " + notificationData.merchantReference;
	msg = msg + "\ncurrency : " + notificationData.currency;
	msg = msg + "\npspReference : " + notificationData.pspReference;
	msg = msg + "\nmerchantAccountCode : " + notificationData.merchantAccountCode;
	msg = msg + "\neventCode : " + notificationData.eventCode;
	msg = msg + "\nvalue : " + notificationData.value;
	msg = msg + "\noperations : " + notificationData.operations;
	msg = msg + "\nsuccess : " + notificationData.success;
	msg = msg + "\npaymentMethod : " + notificationData.paymentMethod;
	msg = msg + "\nlive : " + notificationData.live;
	return msg;
}

module.exports = {
	'notify': notify
}