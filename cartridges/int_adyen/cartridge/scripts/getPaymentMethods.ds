/**
* Send request to adyen to get payment methods based on country code
* A signature is calculated based on the configured HMAC code
*

* @input Basket : dw.order.Basket
* @output PaymentMethods : Object
*/
importPackage( dw.crypto );
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.net );
importPackage( dw.svc );

function execute( args : PipelineDictionary ) : Number
{
	if(args.Basket == null) {
		Logger.getLogger("Adyen").fatal("Basket is not present.");
		return PIPELET_ERROR;
	}

	var skinCode : String = Site.getCurrent().getCustomPreferenceValue("Adyen_skinCode"); 
	var merchantAccount : String = Site.getCurrent().getCustomPreferenceValue("Adyen_merchantCode");
	var HMACkey : String = Site.getCurrent().getCustomPreferenceValue("Adyen_HMACkey"); 
	var Mode : String = Site.getCurrent().getCustomPreferenceValue("Adyen_Mode");
	var allowedMethods : String = Site.getCurrent().getCustomPreferenceValue("Adyen_allowedMethods");
	
	if(merchantAccount == null){
		Logger.getLogger("Adyen").fatal("MERCHANTACCOUNT not set.");  
		return PIPELET_ERROR;
	}
	if(skinCode == null){
		Logger.getLogger("Adyen").fatal("skinCode not set.");  
		return PIPELET_ERROR;
	}
	if(HMACkey == null){
		Logger.getLogger("Adyen").fatal("HMACkey not set.");  
		return PIPELET_ERROR;
	}
	if (allowedMethods == "null" || allowedMethods == null) {
		args.allowedMethods = "";
	}
	
	var currencyCode : String	 		= args.Basket.currencyCode; 
	var merchantReference : String 	    = "Request payment methods";
	var sessionValidity : String 		= "2019-04-06T18:10:29+02:00";
	var paymentAmount : Number			= args.Basket.getTotalGrossPrice() ? args.Basket.getTotalGrossPrice().getValue() * 100 : 1000;
	var countryCode : String			= request.geolocation.countryCode;	
	var url : String					= "https://test.adyen.com/hpp/directory.shtml";
		
	if (Mode == "LIVE") {
		url = "https://live.adyen.com/hpp/directory.shtml";
	}
	
	var paydata : String = paymentAmount + currencyCode + merchantReference + skinCode  + merchantAccount +  sessionValidity + allowedMethods;
	
	var c:Mac = Mac(Mac.HMAC_SHA_1);  
	var merchantSig:String = Encoding.toBase64(c.digest(paydata,HMACkey));  
	
	var reqBody : String = "countryCode=" + countryCode + "&currencyCode=" + currencyCode + "&skinCode=" + skinCode + "&merchantAccount=" + merchantAccount + "&merchantReference=Request+payment+methods" + "&sessionValidity=" + encodeURIComponent(sessionValidity) + "&merchantSig=" + encodeURIComponent(merchantSig) + "&paymentAmount=" + paymentAmount + "&allowedMethods=" + allowedMethods;
	
    var callResult = null;
   	var service : Service = ServiceRegistry.get("adyen.http.payment.methods");
   	var resultObject = null;
   	
   	service.addHeader("Content-type","application/x-www-form-urlencoded"); 
   	service.setURL(url);
   	callResult = service.call(reqBody);
   	
	if (callResult.isOk() == false){
		Logger.error("Adyen: Call error code" +  callResult.getError().toString() + " Error => ResponseStatus: " + callResult.getStatus()  + " | ResponseErrorText: " +  callResult.getErrorMessage() + " | ResponseText: " + callResult.getMsg());
		return PIPELET_ERROR;
	}
   	
   	resultObject = callResult.object;
	
	args.PaymentMethods = JSON.parse(resultObject.text);
	
   return PIPELET_NEXT;
}
