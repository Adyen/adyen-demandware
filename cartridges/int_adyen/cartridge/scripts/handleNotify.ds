/**
 * save Adyen Notification
 * see page 22 of Adyen Integration manual
 *
 * v1 110324 : logging to file
 * v2 110325 :
 * v3 110408 : pass on OrderNo, Paymentresult for update
 * v4 130422 : Merged adyen_notify and update_order into single script  
 *
 * @input CurrentHttpParameterMap : Object
 *
 * @output Order			: dw.order.Order	The updated order 
 * @output EventCode		: String 			The event code
 * @output SkipNotification	: Boolean 			Skip email notification
 * @output RefusedHpp		: Boolean			Indicates that payment was made with using Adyen method and was refused
 * @output Pending  		: Boolean			Indicates that payment is in pending status
 * @output IsCreditCard		: Boolean			Indicates that payment method is credit card
 *
 */
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.value);
importPackage( dw.order); 

function execute( args : PipelineDictionary ) : Number
{
	function Thread() {};
	
	/**
	*   Time delay function
	*/
	Thread.ThreadSleep = function (millis : Number){
	    var date = new Date();
	    var curDate = null;
	    do { curDate = new Date(); }
	    while(curDate-date < millis);  
	}
	
	var paymentSuccess : Boolean = false;
	
	var counter : Number  = 0;
	var success : Boolean = false;	
	while(counter < 2 && !success) {
		try {
		    paymentSuccess = optimisticExecution(args);
		    success = true;
		} catch(e) {
			// Optimistic Execution error handling
			Thread.ThreadSleep(1000);
			counter++;
		}// end try catch
    }
	if(!paymentSuccess){
		return PIPELET_ERROR;
	}

    return PIPELET_NEXT;
}

function createLogMessage(hpm){
	var VERSION : String= "4d";
	var msg = "";
	msg = "AdyenNotification v " + VERSION + " - Payment info (Called from : " + request.httpRemoteAddress + ")";
	msg = msg + "\n================================================================\n";
    //msg = msg + "\nSessionID : " + args.CurrentSession.sessionID;
    msg = msg + "reason : " + hpm.reason.stringValue;
	msg = msg + "\neventDate : " + hpm.eventDate.stringValue;
	msg = msg + "\nmerchantReference : " + hpm.merchantReference.stringValue; 
	msg = msg + "\ncurrency : " + hpm.currency.stringValue;
	msg = msg + "\npspReference : " + hpm.pspReference.stringValue;
	msg = msg + "\nmerchantAccountCode : " + hpm.merchantAccountCode.stringValue;
	msg = msg + "\neventCode : " + hpm.eventCode.stringValue;
	msg = msg + "\nvalue : " + hpm.value.stringValue;
	msg = msg + "\noperations : " + hpm.operations.stringValue;
	msg = msg + "\nsuccess : " + hpm.success.stringValue;
	msg = msg + "\npaymentMethod : " + hpm.paymentMethod.stringValue;
	msg = msg + "\nlive : " + hpm.live.stringValue;
	return msg;
}

/**
*   optimisticExecution function is for handling the Optimistic Execution error
*/
function optimisticExecution(args : PipelineDictionary) {
	// Get the input parameters
	var hpm : Object = args.CurrentHttpParameterMap;
	
	// Check the input parameters
	if (hpm == null) {
		Logger.getLogger("Adyen").fatal("Handling of Adyen notification has failed. No input parameters were provided.");
		return false;
	}
	
	// Configuration
	var paymentSuccess : Boolean = false;
	var refusedHpp : Boolean = false;
	var pending : Boolean = false;
	
	args.EventCode = hpm.eventCode.stringValue;
	args.SkipNotification = false;

	// Log detailed response to ScriptLog and log file
	var msg : String = createLogMessage(hpm);
	Logger.getLogger("Adyen").info(msg);
	
	var order : Order = OrderMgr.getOrder(hpm.merchantReference.stringValue);
	args.Order = order;
	
	if (order == null) {
		Logger.getLogger("Adyen").fatal("Notification for not existing order {0} received.", hpm.merchantReference.stringValue);
		return false;
	}
	
	var paymentInstruments : Collection = order.getPaymentInstruments();
	var paymentInstrument : PaymentInstrument,
		isHpp = false,
		isCreditCard = false;
	for each (paymentInstrument in paymentInstruments) {
		if (paymentInstrument.paymentMethod.equals("Adyen")) {
			isHpp = true;
			break;
		} else if (paymentInstrument.paymentMethod.equals(paymentInstrument.METHOD_CREDIT_CARD)) {
			isCreditCard = true;
			break;
		}
	}
	
	// Update the order status
	switch(hpm.eventCode.stringValue){
		case "AUTHORISATION" :
			if(hpm.success.stringValue == "true"){
				if(order.paymentStatus == Order.PAYMENT_STATUS_PAID){
					Logger.getLogger("Adyen").info ("Duplicate callback received for order {0}.",order.orderNo);
					paymentSuccess = true;
					args.SkipNotification = true;
				}
				else if(order.paymentStatus == "PARTIALLY PAID"){
					paymentSuccess = true;
					Logger.getLogger("Adyen").info ("Partial payment received for order {0}.",order.orderNo);
					args.SkipNotification = true;
				}
				else if(!empty(hpm["additionalData.fraudManualReview"]) && hpm["additionalData.fraudManualReview"].booleanValue) {
					paymentSuccess = true;
					args.SkipNotification = true;
					
					if(hpm.paymentMethod.stringValue == "paypal" && order.status == Order.ORDER_STATUS_CREATED)
						args.SkipNotification = false;
					
					order.setPaymentStatus(Order.PAYMENT_STATUS_NOTPAID);
					order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
					Logger.getLogger("Adyen").info ("Order {0} is waiting manual review.",order.orderNo);
					break;					
				}				
				else {
					order.setPaymentStatus(Order.PAYMENT_STATUS_PAID);
					//order.setExportStatus(Order.EXPORT_STATUS_READY);
					Logger.getLogger("Adyen").info ("Order {0} updated to status PAID.",order.orderNo);
					if (hpm.paymentMethod.stringValue != "paypal")
						args.SkipNotification = true;
					paymentSuccess = true;
				}  
			}else{
				Logger.getLogger("Adyen").info ("Authorization for order {0} was not successful - no update.",order.orderNo);
				args.SkipNotification = true;
				// Determine if payment was refused and was used Adyen payment method 
				if (hpm.reason.stringValue == "Refused" && isHpp) {
					refusedHpp = true;
					paymentSuccess = false;
				}
			}
			break;
		case "CANCELLATION" :
			args.SkipNotification = true;
			order.setPaymentStatus(Order.PAYMENT_STATUS_NOTPAID);
			order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
			Logger.getLogger("Adyen").info ("Order {0} was cancelled.",order.orderNo);
			break;
		case "CANCEL_OR_REFUND" :
			args.SkipNotification = true;
			order.setPaymentStatus(Order.PAYMENT_STATUS_NOTPAID);
			order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
			Logger.getLogger("Adyen").info ("Order {0} was cancelled or refunded.",order.orderNo);
			break;
		case "REFUND" :
			args.SkipNotification = true;
			order.setPaymentStatus(Order.PAYMENT_STATUS_NOTPAID);
			order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
			Logger.getLogger("Adyen").info ("Order {0} was refunded.",order.orderNo);
			break;
		case "ORDER_OPENED" :
			Logger.getLogger("Adyen").info ("Order {0} updated to status PARTIALLY PAID.",order.orderNo);  
			paymentSuccess = true;
			order.setPaymentStatus("PARTIALLY PAID");
			args.SkipNotification = true;
			break;	
		case "ORDER_CLOSED" :
			paymentSuccess = true;
			args.SkipNotification = true;
			order.setPaymentStatus(Order.PAYMENT_STATUS_PAID);
			order.setExportStatus(Order.EXPORT_STATUS_READY);
			Logger.getLogger("Adyen").info ("Order {0} closed and updated to status PAID.",order.orderNo);  
			break;	
		case "PENDING" :
			pending = true;
			paymentSuccess = true;
			args.SkipNotification = true;
			Logger.getLogger("Adyen").info ("Order {0} was in pending status.",order.orderNo);
			break;
		case "MANUAL_REVIEW_REJECT" :
			args.SkipNotification = true;
			order.setPaymentStatus(Order.PAYMENT_STATUS_NOTPAID);
			order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
			Logger.getLogger("Adyen").info ("Order {0} was rejected.",order.orderNo);
			break;
		case "MANUAL_REVIEW_ACCEPT" :
			args.SkipNotification = true;
			paymentSuccess = true;
			order.setPaymentStatus(Order.PAYMENT_STATUS_PAID);
			order.setExportStatus(Order.EXPORT_STATUS_READY);
			Logger.getLogger("Adyen").info ("Order {0} accepted and updated to status PAID.",order.orderNo);  
			break;							
			
		default:
			Logger.getLogger("Adyen").info ("Order {0} received unhandled status {1}",order.orderNo,hpm.eventCode.stringValue);
	}
	
	args.RefusedHpp = refusedHpp;
	args.Pending = pending;
	args.IsCreditCard = isCreditCard;
	
	// If payment was refused and was used Adyen payment method, the fields are changed when user is redirected back from Adyen HPP
	if (!refusedHpp) {
		// Add received information to order
		
		/*
			PSP Reference must be persistent.
			Some modification requests (Capture, Cancel) send identificators of the operations, we mustn't overwrite the original value by the new ones
		*/
		if (empty(order.custom.Adyen_pspReference) && !empty(hpm.pspReference.stringValue)) {
			order.custom.Adyen_pspReference = hpm.pspReference.stringValue;
		}
		
		order.custom.Adyen_value = hpm.value.stringValue;
		order.custom.Adyen_eventCode = hpm.eventCode.stringValue;
		
		// Payment Method must be persistent. When payment is cancelled, Adyen sends an empty string here
		if (empty(order.custom.Adyen_paymentMethod) && !empty(hpm.paymentMethod.stringValue)) {
			order.custom.Adyen_paymentMethod = hpm.paymentMethod.stringValue;
		}
		
		// Add a note with all details
		order.addNote("Adyen Payment Notification", msg);
	}

    return paymentSuccess;
}