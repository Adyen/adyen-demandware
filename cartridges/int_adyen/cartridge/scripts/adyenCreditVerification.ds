/**
* Passes on credit card details to Adyen using the Adyen PAL adapter
* Receives a response and sets the order status accordingly
* created on 23dec2014
*
* @input Order : dw.order.Order
* @input Amount : dw.value.Money The amount to authorize
* @input PaymentInstrument : dw.order.PaymentInstrument 
* @input CurrentSession : dw.system.Session
* @input CurrentRequest : dw.system.Request
* @input CreditCard : Object
*
* @output Decision : String 
* @output PaymentStatus : String
* @output AuthorizationCode :  String
* @output AuthorizationAmount : String
* @output PaRequest : String 
* @output PspReference : String 
* @output MD : String
* @output ResultCode : String
* @output IssuerUrl : String
* @output AVSResultCode : String
* 
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);
importPackage( dw.net); 
importPackage( dw.crypto );
importPackage( dw.svc );
importScript('libs/libAdyen.ds');

function execute( args : PipelineDictionary ) : Number {
	var VERSION : String = "4";
	var MERCHANTACCOUNT : String = Site.getCurrent().getCustomPreferenceValue("Adyen_merchantCode");

	if (MERCHANTACCOUNT == null) {
		Logger.getLogger("Adyen").fatal("MERCHANTACCOUNT not set.");  
		return PIPELET_ERROR;
	}  
	
	try	{
		var msg : String;
		var order = args.Order;
		
		if (order == null) {
			Logger.getLogger("Adyen").fatal("No order {0} present.");
			return PIPELET_ERROR;  
		}
		
		var myAmount = args.Amount.multiply(new Number("100")).value.toFixed();	
		var orderNo = order.currentOrderNo;	
		var a = Math.floor(Math.random()*10000);
		var c : Object = args.PaymentInstrument;

		var card : Object = getCreditCard(args.CreditCard, args.CurrentForms.billing.paymentMethods.creditCard);
		var cardnr : String = card.number;
		var cardcvc : String = card.cvn;
		
		// AVS support
		var billingDetails : String = '';
		var billingAddr : OrderAddress = args.Order.getBillingAddress();
		if (dw.system.Site.getCurrent().getCustomPreferenceValue("Adyen_enableAVS")) {
			billingDetails += "&paymentRequest.card.billingAddress.city=" + encodeURIComponent(billingAddr.city) +
			"&paymentRequest.card.billingAddress.street=" + encodeURIComponent(billingAddr.custom.streetName) +
			"&paymentRequest.card.billingAddress.houseNumberOrName=" + encodeURIComponent(billingAddr.suite) +
			"&paymentRequest.card.billingAddress.postalCode=" + encodeURIComponent(billingAddr.postalCode) +
			"&paymentRequest.card.billingAddress.stateOrProvince=" + encodeURIComponent(billingAddr.stateCode) +
			"&paymentRequest.card.billingAddress.country=" + encodeURIComponent(billingAddr.countryCode.value);
		}
		
		var currentRequest : Request = (args.CurrentRequest)? args.CurrentRequest : request;
		var acceptHeader : String = currentRequest.httpHeaders.get("accept") + currentRequest.httpHeaders.get("accept-encoding");
		var userAgent : String = currentRequest.httpUserAgent;
		
		// get shopper ip
		var shopperIp = currentRequest.getHttpRemoteAddress();
		if (shopperIp == null) { shopperIp = ''; }
		
		var params="action=" + "Payment.authorise" +
			"&paymentRequest.reference=" + encodeURIComponent(orderNo) + 
			"&paymentRequest.shopperReference=" + encodeURIComponent(order.customerNo) +
			"&paymentRequest.merchantAccount=" + encodeURIComponent(MERCHANTACCOUNT) +
			"&paymentRequest.shopperEmail=" + encodeURIComponent(order.customerEmail) +
			"&paymentRequest.amount.value=" + encodeURIComponent(myAmount) +
			"&paymentRequest.amount.currency=" + encodeURIComponent(args.Amount.currencyCode) +
			"&paymentRequest.card.expiryMonth=" + encodeURIComponent(c.creditCardExpirationMonth) +
			"&paymentRequest.card.expiryYear=" + encodeURIComponent(c.creditCardExpirationYear) +
			"&paymentRequest.card.holderName=" + encodeURIComponent(c.creditCardHolder) +
			"&paymentRequest.card.number=" + encodeURIComponent(cardnr) +
			"&paymentRequest.card.cvc=" + encodeURIComponent(cardcvc) + //for testing use cardcvc=737
			"&paymentRequest.shopperIP=" + encodeURIComponent( shopperIp ) + //Shopper IP
			"&paymentRequest.browserInfo.acceptHeader=" + encodeURIComponent( acceptHeader ) + // added for 3DS
		    "&paymentRequest.browserInfo.userAgent=" + encodeURIComponent( userAgent ) + // added for 3DS
		    billingDetails; // added for AVS
		
		var callResult = null;
		var service : Service = ServiceRegistry.get("adyen.http.payment.send");
		var a = service.getConfiguration();
		var resultObject = null;
		
		service.addHeader("Content-type","application/x-www-form-URLencoded"); 
		service.addHeader("charset", "UTF-8");
		callResult = service.call(params);
		
		if (callResult.isOk() == false){
			Logger.error("Adyen: Call error code" +  callResult.getError().toString() + " Error => ResponseStatus: " + callResult.getStatus()  + " | ResponseErrorText: " +  callResult.getErrorMessage() + " | ResponseText: " + callResult.getMsg());
			return PIPELET_ERROR;
		}
		   	
		resultObject = callResult.object;
		
		var resultObj : Object = { // build the result object
				statusCode: resultObject.getStatusCode(),
				statusMessage: resultObject.getStatusMessage(),
				text: resultObject.getText(),
				errorText: resultObject.getErrorText(),
				timeout: resultObject.getTimeout()
			}
				
		var resultText : String = resultObj.text;
		if (resultText == null) { return PIPELET_ERROR; }
		
		// build the response object
		var adyenHelper = getAdyenHelper();
		var responseObj = adyenHelper.getResponseObj(resultText);
		
		// assign default values for the script output variables
		args.PaRequest = '';  
		args.MD = '';		 
		args.IssuerUrl = ''; 
		args.ResultCode = '';
		args.AuthorizationCode = '';
		args.PspReference = '';
		args.PaymentStatus = "?";
		args.AuthorizationAmount = '';
		args.Decision = '';
		
		// return the AVS result code
		args.AVSResultCode = (!empty(responseObj.avsResultRaw) ? responseObj.avsResultRaw : '');
		
		// if the card is enrolled in the 3-D Secure programme the response should contain these 4 fields
		if ('paRequest' in responseObj) { args.PaRequest = responseObj.paRequest; } // paRequest  
		if ('md' in responseObj) { args.MD = responseObj.md; } // md
		if ('issuerUrl' in responseObj) { args.IssuerUrl = responseObj.issuerUrl; } // issuerUrl 
		args.ResultCode = responseObj.resultCode; // resultCode
		
		args.AuthorizationCode = responseObj.authCode;
		args.PspReference = responseObj.pspReference;
		args.PaymentStatus = resultObj.errorText;
		args.AuthorizationAmount = args.Amount.getValue().toFixed(2);
		args.Decision = "ERROR";
		
		var resultCode = args.ResultCode;
		
		if (resultCode.indexOf("Authorised") != -1 || resultCode.indexOf("RedirectShopper") != -1) {
			args.Decision = "ACCEPT";
			args.PaymentStatus = resultCode;
			
			// if 3D Secure is used, the statuses will be updated later
			if (!('issuerUrl' in responseObj) && !responseObj.fraudManualReview) {
				order.setPaymentStatus(Order.PAYMENT_STATUS_PAID);
				order.setExportStatus(Order.EXPORT_STATUS_READY);
			}
			
			Logger.getLogger("Adyen").info ("Payment result: Authorised");
			Logger.getLogger("Adyen").info ("Decision: " + args.Decision);
			
			if (args.AuthorizationCode == '' && args.MD == '') { // if is not 3DSecure
				Logger.getLogger("Adyen").debug("Adyen: " + resultObj.statusCode + " Error => " + resultObj.statusMessage + " | " + resultObj.errorText);	
			}
		}
		else  {
			args.PaymentStatus = "Refused";
			args.Decision = "REFUSED";
			
			order.setPaymentStatus(Order.PAYMENT_STATUS_NOTPAID);
			order.setExportStatus(Order.EXPORT_STATUS_NOTEXPORTED);
				
			Logger.getLogger("Adyen").info ("Payment result: Refused");
		}
				
		args.AuthorizationCode = args.PaymentStatus;
	}
		catch (e) {
			var error = e;
			if (e instanceof Fault) {
			   	Logger.getLogger("Adyen").debug("Adyen: Fault Actor " + e.message + " caused fault [code: '" + e.faultCode + "'] == Error ==> (" + e.faultString + " == Details ==> " + e.faultDetail + ")");
			}
			else {
				Logger.getLogger("Adyen").fatal("Adyen: " + error.toString() + " in " + error.fileName + ":" + error.lineNumber);
			}	
			return PIPELET_ERROR;
	}

   	return PIPELET_NEXT;
}

/*
 * Local methods
 */
var getCreditCard = function (card, creditCardForm) {
	var creditCard;

	// validate card
	if (!empty(card) && !empty(card.owner) && !empty(card.number) && !empty(card.type) && !empty(card.cvn)
			&& !empty(card.expiration) && !empty(card.expiration.month) && !empty(card.expiration.year)) {
		creditCard = card;
	} else {
		// if card invalid, get from form
		creditCard = {
			owner: creditCardForm.owner.value,
			number: creditCardForm.number.value,
			type: creditCardForm.type.value,
			cvn: creditCardForm.cvn.value
		}
	}

	return creditCard;
};

